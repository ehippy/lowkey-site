---
// SpotsRemaining component to display available spots from the API
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;

// Generate a unique ID for this instance
const uniqueId = Math.random().toString(36).substr(2, 9);
---

<span class={`spots-remaining ${className}`} id={`spots-remaining-${uniqueId}`}>
	<span class="spots-text" id={`spots-text-${uniqueId}`}>Loading...</span>
</span>

<style>
	.spots-remaining {
		display: inline-flex;
		gap: 0.375rem;
		font-size: 0.875rem;
		color: var(--color-text-lighter);
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.spots-remaining.loaded {
		opacity: 1;
	}

	.spots-remaining.hero-style {
		color: var(--color-text-light);
		font-size: 0.9rem;
	}

	.spots-remaining.cta-style {
		color: rgba(255, 255, 255, 0.85);
		font-size: 0.9rem;
		justify-content: center;
	}

	.spots-text {
		font-weight: 500;
	}

	.spots-icon {
		width: 16px;
		height: 16px;
		color: var(--color-accent-red);
	}

	.cta-style .spots-icon {
		color: rgba(255, 255, 255, 0.7);
	}

	@media (max-width: var(--breakpoint-mobile)) {
		.spots-remaining {
			font-size: 0.8rem;
		}

		.spots-remaining.hero-style,
		.spots-remaining.cta-style {
			font-size: 0.85rem;
		}
	}
</style>

<script>
	// Fetch spots remaining from the API
	async function fetchSpotsRemaining() {
		try {
			const response = await fetch('https://asfurk8l78.execute-api.us-east-1.amazonaws.com/prod/count');
			
			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}
			
			const data = await response.json();
			return data.spotsRemaining;
		} catch (error) {
			console.error('Error fetching spots remaining:', error);
			return null;
		}
	}

	// Update all spots remaining displays
	async function updateAllSpotsDisplays() {
		const spotsContainers = document.querySelectorAll('.spots-remaining');
		
		if (spotsContainers.length === 0) return;
		
		const spotsRemaining = await fetchSpotsRemaining();
		
		spotsContainers.forEach(container => {
			const spotsElement = container.querySelector('.spots-text');
			
			if (!spotsElement) return;
			
			if (spotsRemaining !== null) {
				// Format the number with commas if needed
				const formattedSpots = spotsRemaining.toLocaleString();
				
				if (spotsRemaining <= 100) {
					spotsElement.innerHTML = `ðŸ”¥ Only ${formattedSpots} spots left`;
				} else if (spotsRemaining <= 500) {
					spotsElement.innerHTML = `âš¡ ${formattedSpots} spots remaining`;
				} else {
					spotsElement.innerHTML = `âœ¨ ${formattedSpots} spots available`;
				}
				
				container.classList.add('loaded');
			} else {
				// Hide the element if we can't fetch the data
				container.style.display = 'none';
			}
		});
	}

	// Initialize when DOM is ready - use a unique function name to avoid conflicts
	function initSpotsRemaining() {
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', updateAllSpotsDisplays);
		} else {
			updateAllSpotsDisplays();
		}
	}

	// Only initialize if this script hasn't run before
	if (!window.spotsRemainingInitialized) {
		window.spotsRemainingInitialized = true;
		// Expose the update function globally for other components to use
		window.updateAllSpotsDisplays = updateAllSpotsDisplays;
		initSpotsRemaining();
	}
</script>

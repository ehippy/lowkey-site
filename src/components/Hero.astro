---
// Hero component for Lowkey landing page
---

<section class="hero">
	<div class="container">
		<div class="hero-content">
			<h1 class="hero-title text-balance">
				Quiet reminders to show up in your relationship
			</h1>
			<p class="hero-subtitle text-balance">
				Consistent, personalized nudges to help you be more thoughtful. 
				Small gestures, big impact. No pressure, just care.
			</p>
			<div class="hero-cta">
				<div class="email-signup">
					<form id="email-form" class="email-form">
						<input 
							type="email" 
							id="email" 
							name="email" 
							placeholder="Enter your email" 
							required 
							class="email-input"
						>
						<button type="submit" class="btn btn-primary">
							Get notified
						</button>
					</form>
					<p class="form-note">
						Be the first to know when Lowkey launches. No spam, just updates.
					</p>
				</div>
			</div>
		</div>
		<div class="hero-visual">
			<div class="phone-mockup">
				<div class="phone-frame">
					<div class="phone-screen">					<div class="notification-demo">
						<div class="notification" id="demo-notification">
							<div class="notification-icon">üíù</div>
							<div class="notification-content">
								<div class="notification-title">Gentle reminder</div>
								<div class="notification-text">
									Send Sarah a photo of something that reminded you of her today
								</div>
								<div class="notification-actions">
									<button class="notification-btn primary" id="demo-action-btn">Text this now</button>
								</div>
							</div>
						</div>
					</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	.hero {
		padding: 4rem 0 6rem;
		background: var(--gradient-hero);
		min-height: 100vh;
		display: flex;
		align-items: center;
	}

	.hero .container {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 4rem;
		align-items: center;
	}

	.hero-title {
		font-size: 3.5rem;
		font-weight: 600;
		margin-bottom: 1.5rem;
		color: var(--color-text);
		line-height: 1.1;
	}

	.hero-subtitle {
		font-size: 1.25rem;
		color: var(--color-text-light);
		margin-bottom: 2.5rem;
		max-width: 500px;
	}

	.hero-cta {
	}

	.email-signup {
	}

	.hero-visual {
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.phone-mockup {
		position: relative;
	}

	.phone-frame {
		width: 280px;
		height: 560px;
		background: var(--color-earth);
		border-radius: 32px;
		padding: 16px;
		box-shadow: 
			0 20px 25px -5px rgb(62 39 35 / 0.2), 
			0 10px 10px -5px rgb(62 39 35 / 0.1);
	}

	.phone-screen {
		width: 100%;
		height: 100%;
		background: linear-gradient(180deg, var(--color-earth) 0%, #4a3d2a 100%);
		border-radius: 20px;
		padding: 1.5rem 1rem;
		display: flex;
		flex-direction: column;
		align-items: stretch;
	}

	.notification-demo {
		width: 100%;
		height: 180px;
		position: relative;
		overflow: hidden;
		margin-top: 1rem;
	}

	.notification {
		background: rgba(255, 255, 255, 0.95);
		border-radius: 16px;
		padding: 1rem;
		display: flex;
		gap: 0.75rem;
		align-items: flex-start;
		box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
		backdrop-filter: blur(10px);
		opacity: 1;
		transform: translateY(0);
		transition: all 0.5s ease-in-out;
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
	}

	.notification-icon {
		font-size: 1.5rem;
		flex-shrink: 0;
	}

	.notification-content {
		flex: 1;
		min-width: 0;
	}

	.notification-title {
		font-weight: 600;
		color: var(--color-text);
		font-size: 0.875rem;
		margin-bottom: 0.25rem;
	}

	.notification-text {
		color: var(--color-text-light);
		font-size: 0.8rem;
		line-height: 1.4;
		margin-bottom: 0.75rem;
	}

	.notification-actions {
		display: flex;
		gap: 0.5rem;
	}

	.notification-btn {
		padding: 0.375rem 0.75rem;
		border-radius: 8px;
		font-size: 0.75rem;
		font-weight: 500;
		border: none;
		cursor: default;
		transition: all 0.2s ease;
		flex-shrink: 0;
		pointer-events: none;
	}

	.notification-btn.primary {
		background-color: var(--color-accent);
		color: white;
	}

	@keyframes slideInFromTop {
		from {
			opacity: 0;
			transform: translateY(-120px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@media (max-width: var(--breakpoint-mobile)) {
		.hero {
			padding: 2rem 0 4rem;
			min-height: auto;
		}

		.hero .container {
			grid-template-columns: 1fr;
			gap: 3rem;
			text-align: center;
		}

		.hero-title {
			font-size: 2.5rem;
		}

		.hero-subtitle {
			font-size: 1.1rem;
			margin: 0 auto 2rem;
		}

		.hero-visual {
			order: -1;
			margin-bottom: 2rem;
		}

		.phone-frame {
			width: 240px;
			height: 480px;
		}

		.notification {
			padding: 0.75rem;
		}

		.notification-text {
			font-size: 0.75rem;
		}
	}
</style>

<script>
	// Notification rotation functionality
	const notifications = [
		{
			icon: 'üíù',
			title: 'Gentle reminder',
			text: 'Send Sarah a photo of something that reminded you of her today',
			action: 'Text this now'
		},
		{
			icon: '‚òï',
			title: 'Morning thought',
			text: 'Text Emma "good morning beautiful" before she starts her day',
			action: 'Send message'
		},
		{
			icon: 'üå∏',
			title: 'Sweet gesture',
			text: 'Leave a little note in Alex\'s laptop bag for tomorrow',
			action: 'Add reminder'
		},
		{
			icon: 'üìö',
			title: 'Show interest',
			text: 'Ask Jordan how her book club meeting went last night',
			action: 'Call now'
		},
		{
			icon: 'üéµ',
			title: 'Share a moment',
			text: 'Send that song that made you think of Maya this morning',
			action: 'Search Spotify'
		},
		{
			icon: 'üåü',
			title: 'Appreciation',
			text: 'Tell Chris one specific thing you appreciated about them today',
			action: 'Journal now'
		},
		{
			icon: 'üçÉ',
			title: 'Spontaneous care',
			text: 'Bring Riley their favorite tea when you get home tonight',
			action: 'Set reminder'
		},
		{
			icon: 'üí≠',
			title: 'Check in',
			text: 'Ask Sam how they\'re feeling about that work presentation tomorrow',
			action: 'Text this'
		},
		{
			icon: 'üåô',
			title: 'Evening connection',
			text: 'Share one highlight from your day with Taylor before bed',
			action: 'Reflect now'
		},
		{
			icon: 'ü§ó',
			title: 'Physical touch',
			text: 'Give Morgan a 20-second hug when you see them next',
			action: 'Set Reminder'
		},
		{
			icon: 'üì∏',
			title: 'Capture the moment',
			text: 'Take a selfie and send it to Jamie with "thinking of you"',
			action: 'Take Selfie'
		},
		{
			icon: 'üéôÔ∏è',
			title: 'Voice message',
			text: 'Record a quick voice memo telling Quinn why you love them',
			action: 'Record voice memo'
		},
		{
			icon: 'üí¨',
			title: 'Check in',
			text: 'Ask Casey about that important meeting she had today',
			action: 'Ask her'
		}
	];

	let currentIndex = 0;

	function updateNotification() {
		const notificationElement = document.getElementById('demo-notification');
		if (!notificationElement) return;

		const notification = notifications[currentIndex];
		const icon = notificationElement.querySelector('.notification-icon');
		const title = notificationElement.querySelector('.notification-title');
		const text = notificationElement.querySelector('.notification-text');
		const actionBtn = notificationElement.querySelector('#demo-action-btn');
		
		// Slide out to the top
		notificationElement.style.opacity = '0';
		notificationElement.style.transform = 'translateY(-120px)';
		
		setTimeout(() => {
			// Update content
			if (icon) icon.textContent = notification.icon;
			if (title) title.textContent = notification.title;
			if (text) text.textContent = notification.text;
			if (actionBtn) actionBtn.textContent = notification.action;
			
			// Reset position to slide in from top
			notificationElement.style.transform = 'translateY(-120px)';
			notificationElement.style.opacity = '1';
			
			// Trigger slide in animation
			setTimeout(() => {
				notificationElement.style.transform = 'translateY(0)';
			}, 50);
			
			// Move to next notification
			currentIndex = (currentIndex + 1) % notifications.length;
		}, 500);
	}

	// Email form functionality
	function setupEmailForm() {
		const form = document.getElementById('email-form');
		const emailInput = document.getElementById('email');
		
		if (form && emailInput) {
			form.addEventListener('submit', function(e) {
				e.preventDefault();
				
				const email = emailInput.value.trim();
				if (!email) return;
				
				console.log('Email submitted:', email);
				
				const button = form.querySelector('button');
				const originalText = button.textContent;
				button.textContent = 'Thank you!';
				button.style.backgroundColor = '#b8956b';
				
				setTimeout(() => {
					button.textContent = originalText;
					button.style.backgroundColor = '';
					emailInput.value = '';
				}, 2000);
			});
		}
	}

	// Initialize everything when DOM is loaded
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', function() {
			setupEmailForm();
			// Start notification rotation after 2 seconds
			setTimeout(() => {
				setInterval(updateNotification, 4000);
			}, 2000);
		});
	} else {
		// DOM is already loaded
		setupEmailForm();
		setTimeout(() => {
			setInterval(updateNotification, 4000);
		}, 2000);
	}
</script>
